# === Core ESPHome Setup ===
esphome:
  name: preplights  # Internal name for the device
  friendly_name: PrepLights # Name shown in Home Assistant
  on_boot:
    priority: -100
    then:
      - script.execute: cycle_modes

# === Board and Framework ===
esp32:
  board: esp32dev                # Most generic ESP32 DevKit board type
  framework:
    type: arduino                # Using Arduino-style firmware

# === Wi-Fi Setup ===
wifi:
  ssid: !secret wifi_ssid        # Wi-Fi SSID (pulled from secrets.yaml)
  password: !secret wifi_password  # Wi-Fi password (also from secrets.yaml)

  ap:
    ssid: "PrepLights Fallback"  # If Wi-Fi fails, boot in AP mode
    password: "12345678"

# === Logging to serial and OTA updates ===
logger:                          # Enables serial logging at 115200 baud

api:                             # Enables HA integration via ESPHome native API

ota:
  platform: esphome              # Enables OTA firmware flashing

# === Simple Web Interface ===
web_server:
  port: 80                       # Access via http://preplights.local

# === Home Assistant Globals ===
globals:
  - id: light_mode           # âœ… Custom variable name
    type: int                # ðŸ”§ Fixed: defines C++ type
    restore_value: yes       # ðŸ”§ Optional: keeps value across reboots
    initial_value: '0'       # âœ… Custom start value (string format)
  - id: led_brightness      # âœ… Custom variable name
    type: int                # ðŸ”§ Fixed: defines C++ type
    restore_value: yes       # ðŸ”§ Optional: keeps value across reboots
    initial_value: '10'     # âœ… Custom start value (string format)

# i2c bus for display
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true    # Scan for devices at boot
  id: bus_a     # Optional but good to have

# === Font for Display ===
font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 12

# === GPIO Output for onboard LED ===
output:
  - platform: gpio
    pin: 2                       # Onboard LED pin (can be changed)
    id: builtin_led              # Reference ID for use below

# === Test Light entity for onboard LED ===
light:
  - platform: binary
    name: "Kitchen Test Light"
    output: builtin_led
    id: kitchen_light

  # === Addressable LED Strip for Testing ===
  - platform: neopixelbus        # LED platform supporting WS2812B / SK6812
    variant: WS2812              # LED type (WS2812B or SK6812)    
    type: GRB                    # LED colour order (check your strip)
    pin: GPIO4                   # Data pin connected to LED strip
    num_leds: 4                 # Number of LEDs in your test strip
    name: "Prep Test Strip"
    id: test_leds
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          
      - addressable_color_wipe:
      - addressable_scan:
          name: "Scanner"
          move_interval: 150ms

    default_transition_length: 0s
    restore_mode: ALWAYS_OFF     # Don't auto-turn on after boot

binary_sensor:        # Button to cycle through light modes 
  - platform: gpio         # GPIO button to cycle through light modes
    pin:
      number: GPIO26          # âœ… Replace with the pin you used
      mode: INPUT_PULLUP     # âœ… Uses internal pull-up resistor
      inverted: true         # âœ… So pressed = true
    name: "Mode Button"      # âœ… Optional, shows in UI/HA
    on_press:
      then:
        - script.execute: cycle_modes


  - platform: gpio
    pin: 
      number: GPIO25                # Pin for the status LED
      mode: INPUT_PULLUP       # Pull-up resistor
      inverted: true           # Inverted logic (pressed = true)
    id: power_button
    name: "Power Button"       # Name shown in Home Assistant
    filters:
      - delayed_on: 10ms      # Delay before turning on
      - delayed_off: 10ms     # Delay before turning off
    on_press:
      then:
        - light.toggle: test_leds   # Toggle the test light when the button is pressed

  - platform: gpio      
    pin:
      number: GPIO33                # Pin for the status LED
      mode: INPUT_PULLUP       # Pull-up resistor
      inverted: true           # Inverted logic (pressed = true)
    id: brightness_button
    name: "Brightness Button"       # Name shown in Home Assistant
    filters:
      - delayed_on: 10ms      # Delay before turning on
      - delayed_off: 10ms     # Delay before turning off
    on_press:
      then:
        - lambda: |-
            id(led_brightness) += 10;
            if (id(led_brightness) > 100) id(led_brightness) = 0;

            auto call = id(test_leds).make_call();
            call.set_brightness(id(led_brightness) / 100.0);
            call.perform();
            ESP_LOGD("brightness", "New brightness: %d%%", id(led_brightness));


# === Display ===
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32"   # Or "SSD1306 128x32" depending on your screen
    id: my_display
    address: 0x3C
    update_interval: 10s
    lambda: |-
      it.printf(0, 0, id(my_font), "Mode: %d", id(light_mode));
      it.printf(0, 12, id(my_font), "Brightness: %d%%", id(led_brightness));


        

# === Scripts ===
script:
  id: cycle_modes             # âœ… Your internal name
  mode: single               # ðŸ”§ Optional but good practice (can also be 'restart', 'queued')
  then:
    - logger.log:
        format: "Current light mode: %d"
        args: [id(light_mode)]
    - if:
        condition:
          lambda: 'return id(light_mode) == 0;'
        then:
          - light.turn_on:
              id: test_leds
              effect: "Rainbow"
              brightness: 10%
    - if:
        condition:
          lambda: 'return id(light_mode) == 1;'
        then:
          - light.turn_on:
              id: test_leds
              effect: "Scanner"
              brightness: 10%
    - if:
        condition:
          lambda: 'return id(light_mode) == 2;'
        then:
          - light.turn_on:
              id: test_leds
              effect: "Party Flicker"
              brightness: 10%
    - lambda: |-
        id(light_mode) += 1;
        if (id(light_mode) > 2) id(light_mode) = 0;


